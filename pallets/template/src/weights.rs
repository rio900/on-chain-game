//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED BASED ON THE CURRENT PALLET LOGIC

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions for pallet_template based on manual analysis.
pub trait WeightInfo {
	fn start_flight() -> Weight;
	fn cause_error() -> Weight;
	fn try_to_collect_resource() -> Weight;
	fn start_game() -> Weight;
	fn admin_set_map_size() -> Weight;
	fn admin_set_max_asteroids_count() -> Weight;
	fn admin_reset_game() -> Weight;
}

/// Weights for pallet_template using default Substrate weights.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn start_flight() -> Weight {
		// Reads: Flights, ActiveShips (contains + get) => 2
		// Writes: Flights => 1
		Weight::from_parts(10_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn cause_error() -> Weight {
		// Reads: Something => 1
		// Writes: Something => 1
		Weight::from_parts(6_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn try_to_collect_resource() -> Weight {
		// Reads: Flights, ActiveShips, Asteroids
		// Writes: could be multiple depending on asteroid kind
		// Assume: +1 write for ship or resource update, +1 for asteroid removal
		Weight::from_parts(18_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}

	fn start_game() -> Weight {
		// Reads: ActiveShips, MapSize, AccountResources (if NFT used)
		// Writes: ActiveShips, DotPrizePool, PlayersCount
		// Conservative estimate: 3 reads, 3 writes
		Weight::from_parts(14_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}

	fn admin_set_map_size() -> Weight {
		// Writes: MapSize
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn admin_set_max_asteroids_count() -> Weight {
		// Writes: MaxAsteroidsCount
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn admin_reset_game() -> Weight {
		// For each player: 1 write (reset ship)
		// For each player with flight: 1 write (remove flight)
		// Assume flights = players in worst case
		let ops = 10;
		Weight::from_parts(5_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(2 * ops))
	}
}

// For backwards compatibility and testing
impl WeightInfo for () {
	fn start_flight() -> Weight {
		Weight::from_parts(10_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn cause_error() -> Weight {
		Weight::from_parts(6_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn try_to_collect_resource() -> Weight {
		Weight::from_parts(18_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn start_game() -> Weight {
		Weight::from_parts(14_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn admin_set_map_size() -> Weight {
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn admin_set_max_asteroids_count() -> Weight {
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn admin_reset_game() -> Weight {
		let ops = 10;
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2 * ops))
	}
}